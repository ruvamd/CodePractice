---
recursion
---

Fill in the blanks to make the is_power_of function
return whether the number is a power of the given base. 
Note: base is assumed to be a positive number. 
Tip: for functions that return a boolean value, you 
can return the result of a comparison.

def is_power_of(number,base):
  if number%base or base==1: 
      return False 
  i=1
  while i<number:
    i*=base
    if i==number: 
        return True
  return False

print(is_power_of(8,2)) # Should be True
print(is_power_of(64,4)) # Should be True
print(is_power_of(70,10)) # Should be False
---
done
---
The count_users function recursively counts the amount of users that belong to a group in the company 
system, by going through each of the members of a group and if one of them is a group, recursively calling 
the function and counting the members. But it has a bug! Can you spot the problem and fix it?

def count_users(group):
  count = 0
  for member in get_members(group):
    count += 1
    if is_group(member):
      count += count_users(member)
  return count

print(count_users("sales")) # Should be 3
print(count_users("engineering")) # Should be 8
print(count_users("everyone")) # Should be 18
---
Implement the sum_positive_numbers function, as a recursive function that returns the sum of all positive 
numbers between the number n received and 1. For example, when n is 3 it should return 1+2+3=6, and when n 
is 5 it should return 1+2+3+4+5=15.

def sum_positive_numbers(n):
  if n<=1:
    return 1
  return n+sum_positive_numbers(n-1)
  
print(sum_positive_numbers(3)) # Should be 6
print(sum_positive_numbers(5)) # Should be 15
----
done
----
==
week 4
====
Practice Quiz: Strings
1.Question 1
The is_palindrome function checks if a string is a palindrome.
A palindrome is a string that can be equally read from left
to right
or right to left, omitting blank spaces, and ignoring 
capitalization. Examples of palindromes are words like 
kayak and radar, and 
phrases like "Never Odd or Even". Fill in the blanks in 
this function to return True if the passed string is a p
alindrome, False if not.

def is_palindrome(input_string):
# We'll create two strings, to compare them
	new_string = ""
	reverse_string = ""
	input_string=input_string.lower()
	# Traverse through each letter of the input string
	for l in input_string:
		# Add any non-blank letters to the 
		# end of one string, and to the front
		# of the other string.       
		if l!=' ':
			new_string = new_string+l
			reverse_string = l+reverse_string
	# Compare the strings
	if new_string==reverse_string:
		return True
	return False

print(is_palindrome("Never Odd or Even")) # Should be True
print(is_palindrome("abc")) # Should be False
print(is_palindrome("kayak")) # Should be True
----
done
----
2.Question 2
Using the format method, fill in the gaps in the convert_distance function so that it returns the phrase "X miles equals Y km",
 with Y having only 1 decimal place. For example, convert_distance(12) should return "12 miles equals 19.2 km".

def convert_distance(miles):
	km = miles * 1.6 
	result = f"{miles} miles equals {round(km,2)} km"
	return result

print(convert_distance(12)) # Should be: 12 miles equals 19.2 km
print(convert_distance(5.5)) # Should be: 5.5 miles equals 8.8 km
print(convert_distance(11)) # Should be: 11 miles equals 17.6 km
---
done
----
3.Question 3
If we have a string variable named Weather = "Rainfall", 
which of the following will print the substring or 
all characters before the "f"?

choose

print(Weather[:4])


print(Weather[4:])


print(Weather[1:4])


print(Weather[:"f"])
---
ans:1,3

done
-----
4.Question 4
Fill in the gaps in the nametag function so that it uses the 
format method to return first_name and the first initial of
last_name followed by a period. For example, 
nametag("Jane", "Smith") should return "Jane S."

def nametag(first_name, last_name):
	return(f"'{first_name} {last_name[0]}.'")

print(nametag("Jane", "Smith")) 
# Should display "Jane S." 
print(nametag("Francesco", "Rinaldi")) 
# Should display "Francesco R." 
print(nametag("Jean-Luc", "Grand-Pierre")) 
# Should display "Jean-Luc G." 
----
done
----
5.Question 5
The replace_ending function replaces the old string in a 
sentence with the new string, but only if the sentence ends 
with the old string. If there is more than one occurrence of 
the old string in the sentence, only the one at the end is 
replaced, not all of them. For example, 
replace_ending("abcabc", "abc", "xyz") should return abcxyz,
not xyzxyz or xyzabc. The string comparison is case-sensitive,
so replace_ending("abcabc", "ABC", "xyz") should return abcabc
 (no changes made).

def replace_ending(sentence, old, new):
	# Check if the old string is at the end of the sentence 
	if sentence[-len(old):]==old:
		# Using i as the slicing index, combine the part
		# of the sentence up to the matched string at the 
		# end with the new string
		i = sentence[:-len(old)
		new_sentence = i+new
		return new_sentence

	# Return the original sentence if there is no match 
	return sentence
	
print(replace_ending("It's raining cats and cats", "cats", "dogs")) 
# Should display "It's raining cats and dogs"
print(replace_ending("She sells seashells by the seashore", "seashells", "donuts")) 
# Should display "She sells seashells by the seashore"
print(replace_ending("The weather is nice in May", "may", "april")) 
# Should display "The weather is nice in May"
print(replace_ending("The weather is nice in May", "May", "April")) 
# Should display "The weather is nice in April"
---
done
---
Practice Quiz: Lists
1.Question 1
Given a list of filenames, we want to rename all the files
with extension hpp to the extension h. To do this, we would 
like to generate a new list called newfilenames, consisting 
of the new filenames. Fill in the blanks in the code using any 
of the methods you’ve learned thus far, like a for loop or a 
list comprehension.

filenames = ["program.c", "stdio.hpp", "sample.hpp", "a.out", "math.hpp", "hpp.out"]
# Generate newfilenames as a list containing the new filenames
# using as many lines of code as your chosen method requires.
newfilenames = []
for x in range(len(filenames)):
    old_name = filenames[x]
    if old_name.endswith(".hpp"):
      new_name = old_name.replace('.hpp','.h')
    else:
      new_name = old_name;
    newfilenames.append((new_name))
print(newfilenames) 
# Should be ["program.c", "stdio.h", "sample.h", "a.out", "math.h", "hpp.out"]
----
done
----
2.Question 2
Let's create a function that turns text into pig latin: a
simple text transformation that modifies each word moving 
the first character to the end and appending "ay" to the end.
For example, python ends up as ythonpay.

def pig_latin(text):
  say = ''
	words=text.split()
	for word in words:
		new_word=word[1:]+word[0]+'ay'+' '
		say+=new_word
	return say
		
print(pig_latin("hello how are you")) # Should be "ellohay owhay reaay ouyay"
print(pig_latin("programming in python is fun")) # Should be "rogrammingpay niay ythonpay siay unfay"
----
done
----
3.Question 3
The permissions of a file in a Linux system are split into
three sets of three permissions: read, write, and execute 
for the owner, group, and others. Each of the three values 
can be expressed as an octal number summing each permission, 
with 4 corresponding to read, 2 to write, and 1 to execute. 
Or it can be written with a string using the letters r, w, 
and x or - when the permission is not granted. For example: 
640 is read/write for the owner, read for the group, and no 
permissions for the others; converted to a string, it would 
be: "rw-r-----" 755 is read/write/execute for the owner, and
read/execute for group and others; converted to a string, it
would be: "rwxr-xr-x" Fill in the blanks to make the code 
convert a permission in octal format into a string format.

def octal_to_string(octal):
    result = ""
    value_letters = [(4,"r"),(2,"w"),(1,"x")]
    # Iterate over each of the digits in octal
    for l in [int(n) for n in str(octal)]:
        # Check for each of the permissions values
        for value, letter in value_letters:
            if l >= value:
                result += letter
                l -= value
            else:
                result+='-'
    return result
    
print(octal_to_string(755)) # Should be rwxr-xr-x
print(octal_to_string(644)) # Should be rw-r--r--
print(octal_to_string(750)) # Should be rwxr-x---
print(octal_to_string(600)) # Should be rw-------
-----
done
----
4.Question 4
Tuples and lists are very similar types of sequences. 
What is the main thing that makes a tuple different from a list?

choose

A tuple is mutable


A tuple contains only numeric characters


A tuple is immutable


A tuple can contain only one type of data at a time
-----
ans: A tuple is immutable
done
-----
5.Question 5
The group_list function accepts a group name and a list of
members, and returns a string with the format: group_name: 
member1, member2, … For example, group_list("g", ["a","b","c"])
returns "g: a, b, c". Fill in the gaps in this function to do
that.

def group_list(group, users):
  members = ', '.join(users)
  return f'{group}: {members}'

print(group_list("Marketing", ["Mike", "Karen", "Jake", "Tasha"])) # Should be "Marketing: Mike, Karen, Jake, Tasha"
print(group_list("Engineering", ["Kim", "Jay", "Tom"])) # Should be "Engineering: Kim, Jay, Tom"
print(group_list("Users", "")) # Should be "Users:"
----
done
----
6.Question 6
The guest_list function reads in a list of tuples with
the name, age, and profession of each party guest, and 
prints the sentence "Guest is X years old and works as __." 
for each one. For example, guest_list(('Ken', 30, "Chef"),
("Pat", 35, 'Lawyer'), ('Amanda', 25, "Engineer")) should 
print out: Ken is 30 years old and works as Chef. Pat 
is 35 years old and works as Lawyer. Amanda is 25 years 
old and works as Engineer. Fill in the gaps in this function
to do that.

def guest_list(guests):
	for guest in guests:
		name,age,profession=guest
		print(f'{name} is {age} years old and works as {profession}')

guest_list([('Ken', 30, "Chef"), ("Pat", 35, 'Lawyer'), ('Amanda', 25, "Engineer")])

"""
Output should match:
Ken is 30 years old and works as Chef
Pat is 35 years old and works as Lawyer
Amanda is 25 years old and works as Engineer
"""
----
done
----
Practice Quiz: Dictionaries

1.Question 1
The email_list function receives a dictionary, which 
contains domain names as keys, and a list of users as values.
Fill in the blanks to generate a list that contains complete
email addresses (e.g. diana.prince@gmail.com).

def email_list(domains):
	emails = []
	for domain,users in domains.items():
	  for user in users:
	    emails.append(user+'@'+domain)
	return(emails)

print(email_list({"gmail.com": ["clark.kent", "diana.prince", "peter.parker"], "yahoo.com": ["barbara.gordon", "jean.grey"], "hotmail.com": ["bruce.wayne"]}))
-----
done
----
2.Question 2
The groups_per_user function receives a dictionary, which 
contains group names with the list of users. Users can belong 
to multiple groups. Fill in the blanks to return a dictionary 
with the users as keys and a list of their groups as values.

def groups_per_user(group_dictionary):
	user_groups = {}
	for group, users in group_dictionary.items():
		for user in users:
			user_groups.setdefault(user, []).append(group)

			# Now add the group to the the list of
			# groups for this user, creating the entry
			# in the dictionary if necessary
			

	return(user_groups)

print(groups_per_user({"local": ["admin", "userA"],"public":  ["admin", "userB"],"administrator": ["admin"] }))
----
done
----
3.Question 3
The dict.update method updates one dictionary with the items
coming from the other dictionary, so that existing entries 
are replaced and new entries are added. What is the content 
of the dictionary “wardrobe“ at the end of the following code?

wardrobe = {'shirt': ['red', 'blue', 'white'], 'jeans': ['blue', 'black']}
new_items = {'jeans': ['white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}
wardrobe.update(new_items)

choose

{'jeans': ['white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}


{'shirt': ['red', 'blue', 'white'], 'jeans': ['white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}


anw:{'shirt': ['red', 'blue', 'white'], 'jeans': ['blue', 'black', 'white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}


{'shirt': ['red', 'blue', 'white'], 'jeans': ['blue', 'black'], 'jeans': ['white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}
----
done
---
5.Question 5
The add_prices function returns the total price of all of the
groceries in the dictionary. Fill in the blanks to complete 
this function.

def add_prices(basket):
	# Initialize the variable that will be used for the calculation
	total = 0
	# Iterate through the dictionary items
	for grocery,price in basket.items():
		# Add each price to the total calculation
		# Hint: how do you access the values of
		# dictionary items?    
		total += basket.get(grocery)
	# Limit the return value to 2 decimal places
	return round(total, 2)  

groceries = {"bananas": 1.56, "apples": 2.50, "oranges": 0.99, "bread": 4.59, 
	"coffee": 6.99, "milk": 3.39, "eggs": 2.98, "cheese": 5.44}

print(add_prices(groceries)) # Should print 28.44
-----
done
-----
Module 4 Graded Assessment

1.Question 1
The format_address function separates out parts of the 
address string into new strings: house_number and
street_name, and returns: "house number X on street named Y". 
The format of the input string is: numeric house number, 
followed by the street name which may contain numbers, but
never by themselves, 
and could be several words long. For example, "123 Main Street", 
"1001 1st Ave", or "55 North Center Drive". Fill in the gaps to 
complete this function.


def format_address(address_string):
  # Declare variables
        house_number=[]
        street_name=[]
  # Separate the address string into parts
        house_number,street_name=address_string.split(' ',1)
  # Traverse through the address parts
  
    # Determine if the address part is the
    # house number or part of the street name

  # Does anything else need to be done 
  # before returning the result?
  
  # Return the formatted string  
        return f"house number {house_number} on street named {street_name}"

print(format_address("123 Main Street"))
# Should print: "house number 123 on street named Main Street"

print(format_address("1001 1st Ave"))
# Should print: "house number 1001 on street named 1st Ave"

print(format_address("55 North Center Drive"))
# Should print "house number 55 on street named North Center Drive"
----
done
----
2.Question 2
The highlight_word function changes the given word in a 
sentence to its upper-case version. For example, 
highlight_word("Have a nice day", "nice") returns "Have 
a NICE day". Can you write this function in just one line?

def highlight_word(sentence, word):
	return(sentence.replace(word,word.upper()))

print(highlight_word("Have a nice day", "nice"))
print(highlight_word("Shhh, don't be so loud!", "loud"))
print(highlight_word("Automating with Python is fun", "fun"))
----
done
----
3.Question 3
A professor with two assistants, Jamie and Drew, wants
an attendance list of the students, in the order that 
they arrived in the classroom. Drew was the first one to
note which students arrived, and then Jamie took over. 
After the class, they each entered their lists into the 
computer and emailed them to the professor, who needs to 
combine them into one, in the order of each student's arrival. 
Jamie emailed a follow-up, saying that her list is in reverse 
order. Complete the steps to combine them into one list as 
follows: the contents of Drew's list, followed by Jamie's 
list in reverse order, to get an accurate list of the students 
as they arrived.

def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  new_list = list2
  for i in reversed(range(len(list1))):
    new_list.append(list1[i])
  return new_list
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]

print(combine_lists(Jamies_list, Drews_list))
----
done
----
4.Question 4
Use a list comprehension to create a list of squared 
numbers (n*n). The function receives the variables start 
and end, and returns a list of squares of consecutive numbers 
between start and end inclusively. For example, 
squares(2, 3) should return [4, 9].

def squares(start, end):
	return [ (n*n) for n in range(start,end+1) ]

print(squares(2, 3)) # Should be [4, 9]
print(squares(1, 5)) # Should be [1, 4, 9, 16, 25]
print(squares(0, 10)) # Should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
---
done
---
5.Question 5
Complete the code to iterate through the keys and values of 
the car_prices dictionary, printing out some information 
about each one.

def car_listing(car_prices):
  result = ""
  for key in car_prices:
    result += f"{key} costs {car_prices[key]} dollars, "
  return result

print(car_listing({"Kia Soul":19000, "Lamborghini Diablo":55000, "Ford Fiesta":13000, "Toyota Prius":24000}))
---
done
----
6.Question 6
Taylor and Rory are hosting a party. They sent out invitations,
and each one collected responses into dictionaries, with 
names of their friends and how many guests each friend is 
bringing. Each dictionary is a partial list, but Rory's list
 has more current information about the number of guests. 
 Fill in the blanks to combine both dictionaries into one, 
 with each friend listed only once, and the number of guests 
 from Rory's dictionary taking precedence, if a name is 
 included in both dictionaries. Then print the resulting 
 dictionary.

def combine_guests(guests1, guests2):
  # Combine both dictionaries into one, with each key listed 
  # only once, and the value from guests1 taking precedence
  combined_dic = guests1
  for key2 in guests2:
    if key2 in guests1:
      pass
    else:
      combined_dic[key2] = guests2[key2]
  
  return combined_dic
Rorys_guests = { "Adam":2, "Brenda":3, "David":1, "Jose":3, "Charlotte":2, "Terry":1, "Robert":4}
Taylors_guests = { "David":4, "Nancy":1, "Robert":2, "Adam":1, "Samantha":3, "Chris":5}

print(combine_guests(Rorys_guests, Taylors_guests))
-----
done
-----
7.Question 7
Use a dictionary to count the frequency of letters in the 
input string. Only letters should be counted, not blank 
spaces, numbers, or punctuation. Upper case should be 
considered the same as lower case. For example, 
count_letters("This is a sentence.") 
should return {'t': 2, 'h': 1, 'i': 2, 's': 3, 'a': 1, 'e': 3, 'n': 2, 'c': 1}.

def count_letters(text):
  result = {}
  # Go through each letter in the text
  convert_text = text.lower()

  for letter in convert_text:
    if letter.isalpha():
      if letter in result:
        result[letter] += 1
      else:
        result[letter] = 1
  return result

print(count_letters("AaBbCc"))
# Should be {'a': 2, 'b': 2, 'c': 2}

print(count_letters("Math is fun! 2+2=4"))
# Should be {'m': 1, 'a': 1, 't': 1, 'h': 1, 'i': 1, 's': 1, 'f': 1, 'u': 1, 'n': 1}

print(count_letters("This is a sentence."))
# Should be {'t': 2, 'h': 1, 'i': 2, 's': 3, 'a': 1, 'e': 3, 'n': 2, 'c': 1}
---
done
---
8.Question 8
What do the following commands return when 
animal = "Hippopotamus"?
>>> print(animal[3:6])
>>> print(animal[-5])
>>> print(animal[10:])

choose

ppo, t, mus


ppop, o, s


ans: pop, t, us


popo, t, mus
-----
done
-----
9.Question 9
What does the list "colors" contain after these commands 
are executed?
colors = ["red", "white", "blue"]
colors.insert(2, "yellow")

choose



['red', 'white', 'yellow', 'blue']


['red', 'yellow', 'white', 'blue']


['red', 'yellow', 'blue']


ans: ['red', 'white', 'yellow']

10.Question 10
What do the following commands return?

host_addresses = {"router": "192.168.1.1", "localhost": "127.0.0.1", "google": "8.8.8.8"}
host_addresses.keys()

choose


{"router": "192.168.1.1", "localhost": "127.0.0.1", "google": "8.8.8.8"}


["router", "192.168.1.1", "localhost", "127.0.0.1", "google", "8.8.8.8"]


['192.168.1.1', '127.0.0.1', '8.8.8.8']


anw: ['router', 'localhost', 'google']

