---
recursion
---

Fill in the blanks to make the is_power_of function
return whether the number is a power of the given base. 
Note: base is assumed to be a positive number. 
Tip: for functions that return a boolean value, you 
can return the result of a comparison.

def is_power_of(number, base):
  # Base case: when number is smaller than base.
  if number < base:
    # If number is equal to 1, it's a power (base**0).
    return __

  # Recursive case: keep dividing number by base.
  return is_power_of(__, ___)

print(is_power_of(8,2)) # Should be True
print(is_power_of(64,4)) # Should be True
print(is_power_of(70,10)) # Should be False
---
The count_users function recursively counts the amount of users that belong to a group in the company system, by going through each of the members of a group and if one of them is a group, recursively calling the function and counting the members. But it has a bug! Can you spot the problem and fix it?

def count_users(group):
  count = 0
  for member in get_members(group):
    count += 1
    if is_group(member):
      count += count_users(member)
  return count

print(count_users("sales")) # Should be 3
print(count_users("engineering")) # Should be 8
print(count_users("everyone")) # Should be 18
---
Implement the sum_positive_numbers function, as a recursive function that returns the sum of all positive numbers between the number n received and 1. For example, when n is 3 it should return 1+2+3=6, and when n is 5 it should return 1+2+3+4+5=15.

def sum_positive_numbers(n):
  return 0

print(sum_positive_numbers(3)) # Should be 6
print(sum_positive_numbers(5)) # Should be 15
---
Module 3 Graded Assessment

1.Question 1
Fill in the blanks of this code to print out the 
numbers 1 through 7.

number = 1
while number <= 7:
    print(number, end=" ")
    number += 1

-----
done
-----
2.Question 2
The show_letters function should print out each letter 
of a word on a separate line. Fill in the blanks to make
that happen.

def show_letters(word):
	for letter in word:
		print(letter)

show_letters("Hello")
# Should print one line per letter
----
done
----
3.Question 3
Complete the function digits(n) that returns how many 
digits the number has. For example: 25 has 2 digits and
144 has 3 digits. 
Tip: you can figure out the digits of 
a number by dividing it by 10 once per digit until there
are no digits left.

def digits(n):
	count = 0
	if n == 0:
	  return 1
	while (n>0):
		count += 1
		n//=10
	return count
	
print(digits(25))   # Should print 2
print(digits(144))  # Should print 3
print(digits(1000)) # Should print 4
print(digits(0))    # Should print 1
-----
done
-----
4.Question 4
This function prints out a multiplication table
(where each number is the result of multiplying the
first number of its row by the number at the top of
its column). Fill in the blanks so that calling 
multiplication_table(1, 3) will print out:

1 2 3

2 4 6

3 6 9

def multiplication_table(start, stop):
	for x in range(1,4):
		for y in range(1,4):
			print(str(x*y), end=" ")
		print('\n')

multiplication_table(1, 3)
# Should print the multiplication table shown above
---
done
---
5.Question 5
The counter function counts down from start to stop 
when start is bigger than stop, and counts up from start 
to stop otherwise. Fill in the blanks to make this work 
correctly.

def counter(start, stop):
	x = start
	if ___:
		return_string = "Counting down: "
		while x >= stop:
			return_string += str(x)
			if ___:
				return_string += ","
			___
	else:
		return_string = "Counting up: "
		while x <= stop:
			return_string += str(x)
			if ___:
				return_string += ","
			___
	return return_string

print(counter(1, 10)) # Should be "Counting up: 1,2,3,4,5,6,7,8,9,10"
print(counter(2, 1)) # Should be "Counting down: 2,1"
print(counter(5, 5)) # Should be "Counting up: 5"
----

6.Question 6
The even_numbers function returns a space-separated string of all positive numbers that are divisible by 2, up to and including the maximum that's passed into the function. For example, even_numbers(6) returns “2 4 6”. Fill in the blank to make this work.

def even_numbers(maximum):
	return_string = ""
	for x in ___:
		return_string += str(x) + " "
	return return_string.strip()

print(even_numbers(6))  # Should be 2 4 6
print(even_numbers(10)) # Should be 2 4 6 8 10
print(even_numbers(1))  # No numbers displayed
print(even_numbers(3))  # Should be 2
print(even_numbers(0))  # No numbers displayed
---
7.Question 7
The following code raises an error when executed. What's the reason for the error?

def decade_counter():
	while year < 50:
		year += 10
	return year

choose

Incrementing by 10 instead of 1


Failure to initialize variables


Nothing is happening inside the while loop


Wrong comparison operator
-----
8.Question 8
What is the value of x at the end of the following code?

for x in range(1, 10, 3):
    print(x)
---
9.Question 9
What is the value of y at the end of the following code?
for x in range(10):
    for y in range(x):
        print(y)
-----
10.Question 10
How does this function need to be called to print yes, no, and maybe as possible options to vote for?

def votes(params):
	for vote in params:
	    print("Possible option:" + vote)

choose


votes("yes", "no", "maybe")


votes(yes, no, maybe)


votes([yes, no, maybe])


votes(['yes', 'no', 'maybe'])




